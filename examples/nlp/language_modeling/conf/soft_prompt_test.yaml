name: megatron_gpt_125M_prompt_tune

trainer:
  devices: 1
  accelerator: gpu
  num_nodes: 1
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 1
  max_steps: null # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 75
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.


exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: ${name}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 2
    mode: min
    save_nemo_on_train_end: False
    filename: 'megatron_gpt_prompt_tune--{val_loss:.3f}-{step}'
    model_parallel_size: ${model.tensor_model_parallel_size}
    save_best_model: True

model:
  seed: 1234
  nemo_path: ${name}.nemo # .nemo filename and path to where the model and associated artifacts should be saved
  lm_finetune: False # whether fine tune the language model
  pseudo_token: 'PROMPT_' # pseudo prompt tokens
  virtual_prompt_style: 'prompt-tuning' # either 'prompt-tuning' or 'p-tuning'
  encoder_seq_length: 1024 # max number of tokens length to decode, if set null, it will be inferred from data
  total_virtual_tokens: 100 # Sum of tokens in prompt_token_splits must add to this number
  tensor_model_parallel_size: 1 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  batch_size: 2

  #restore_path: models/megatron_gpt_125M_prompt_tune.nemo # Path to an existing p-tuned/prompt tuned model you wish to add new tasks to or run inference with
  #existing_tasks: ['squad', 'intent_and_slot'] # List of tasks the model has already been p-tuned/prompt-tuned for. Needed when a restore path is given
  #existing_tasks: ['boolq']
  #existing_tasks: ['squad']
  language_model_path: models/megatron_125M_gpt.nemo # Path to the GPT language model .nemo file
  #new_tasks: ['boolq'] # List of new tasknames to be prompt-tuned
  #new_tasks: ['squad', 'intent_and_slot']
  new_tasks: ['squad']
  #new_tasks: []

  task_templates: # Add more as needed
    # - taskname: 'boolq'
    #   prompt_template: '<|SOFT_PROMPT_0|>{text}{answer}'
    #   prompt_token_splits: [100] # number of tokens at each soft prompt location, must add to total_soft_tokens
    - taskname: 'squad'
      prompt_template: '<|VIRTUAL_PROMPT_0|>{text}{answer}'
      prompt_token_splits: [100] # number of tokens at each soft prompt location, must add to total_soft_tokens
    # - taskname: 'intent_and_slot'
    #   prompt_template: '<|SOFT_PROMPT_0|>{text}{answer}'
    #   prompt_token_splits: [100] # number of tokens at each soft prompt location, must add to total_soft_tokens
    
    
  prompt_tuning:
    new_prompt_init_methods: ['text'] # List of 'text' or 'random', should correspond to tasks listed in new tasks
    new_prompt_init_text: ['some init text goes here'] # some init text if init method is text, or None if init method is random

  p_tuning:
    dropout: 0.0
    num_layers: 2
    save_tuned_prompts_to_prompt_table: True

  data:
    # train_ds: [data/debug_boolq_train.jsonl] # List of comma seprated .json or .jsonl dataset files for training
    # validation_ds: [data/debug_boolq_val.jsonl] # List of comma seprated .json or .jsonl dataset files for validation
    # train_ds: [data/debug_intent_and_slot_train.jsonl]
    # validation_ds: [data/debug_intent_and_slot_val.jsonl]
    train_ds: [data/debug_squad_train.jsonl]
    validation_ds: [data/debug_squad_val.jsonl]
    # train_ds: [data/debug_squad_train.jsonl, data/debug_intent_and_slot_train.jsonl]
    # validation_ds: [data/debug_squad_val.jsonl, data/debug_intent_and_slot_val.jsonl]
    add_eos: True
    shuffle: True
    num_workers: 1
    pin_memory: True


  optim:
    name: fused_adam
    lr: 1e-4
    weight_decay: 0.01 
    betas: 
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 50
      constant_steps: 10
      min_lr: 1e-6
      monitor: val_loss
      reduce_on_plateau: false